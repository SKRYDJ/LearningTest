"""
Все решения поместить в файл task03.py и разместить его на github
•	Создать класс в конструктор которого передается одно число В этом классе дожен быть метод show, который\
    распечатывает переданное число.
•	Создать класс, который наследуется от предыдущего класса и в этот класс передается два числа. Данный класс\
    реализует метод calc, который складывает эти два числа.
•	Создать блок try/except/finally Внутри блока try создать выражение, которое делит на 0. Перехватить эту ошибку и\
    распечатать сообщение пользвоателю.
•	Создать декоратор, который перед запуском функции распечатывает все аргументы вызываемой функции.
•	Создать класс в котором применить декоартор @property для доступа к внутренней переменной.
•	Создать генератор который возвращается числа от 1 до 10
•	С помощью стандартной функции collections.namedtuple создать объект для хранения точки в трехмерном пространстве.
•	Создать пакет в котором будет функция для распечатки текущей даты (можно использовать пакет datetime). Для данного\
    пакета подготовить setup.py для установки.
"""


# Создать класс в конструктор которого передается одно число В этом классе дожен быть метод show, который распечатывает\
# переданное число.
class NumberShow:

    def __init__(self, value):
        self.number = value

    def show(self):
        print(self.number)


exp1 = NumberShow(8)
exp1.show()  # результат 8


# Создать класс, который наследуется от предыдущего класса и в этот класс передается два числа. Данный класс\
# реализует метод calc, который складывает эти два числа.
class NumberCalc(NumberShow):
    def __init__(self, value, value2):
        super().__init__(value)
        self.number2 = value2

    def __add__(self):
        return self.number + self.number2


exp1 = NumberCalc(2, 11)
exp3 = NumberCalc
exp3.__add__(exp1)  # результат 13

# Создать блок try/except/finally Внутри блока try создать выражение, которое делит на 0. Перехватить эту ошибку и\
# распечатать сообщение пользвоателю.

try:
    1 / 0  # Division Error by 0
except ZeroDivisionError:
    print("Нельзя делить на ноль")
else:
    print("No errors")
finally:
    print("Конец блока")


# Создать декоратор, который перед запуском функции распечатывает все аргументы вызываемой функции.
def FuncDecor(func):
    def NextFunc(arg1, arg2):
        print('Look at my arguments: ', arg1, arg2)
        func(arg1, arg2)

    return NextFunc


@FuncDecor
def few(x, y):
    return x, y


few(11, 34)  # результат "Look at my arguments:  11 44"


# Создать класс в котором применить декоартор @property для доступа к внутренней переменной.

# Создать генератор который возвращается числа от 1 до 10
def MyGenerator(x):
    y = 1
    while y < x:
        yield y
        y += 1


for numgen in MyGenerator(11):
    print(numgen)

# С помощью стандартной функции collections.namedtuple создать объект для хранения точки в трехмерном пространстве.

# Создать пакет в котором будет функция для распечатки текущей даты (можно использовать пакет datetime). Для данного\
# пакета подготовить setup.py для установки.
from datetime import datetime as DateTime


def currentdate():
    return DateTime.now()

print(currentdate())    #результат  2021-11-16 14:52:42.168636
